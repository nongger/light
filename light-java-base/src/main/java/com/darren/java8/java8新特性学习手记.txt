java8学习笔记

一、底层优化
  1. java8中对底层数据结构的改变
   1.8以前hashMap使用数组-链表的数据结构，1.8中引进红黑树 HashMap的数据结构为：数组-链表-红黑树
   产生hash冲突时链表是在后面添加，1.8以前是添加在链表头的

  2. 对JVM的改变
   JVM方法区属于堆区永久代的一部分（被垃圾回收机制回收的条件极为苛刻），在java8中方法区直接使用物理内存

二、Lambda 表达式的基础语法：Java8中引入了一个新的操作符 "->" 该操作符称为箭头操作符或 Lambda 操作符
  						    箭头操作符将 Lambda 表达式拆分成两部分：

  左侧：Lambda 表达式的参数列表
  右侧：Lambda 表达式中所需执行的功能， 即 Lambda 体

  语法格式一：无参数，无返回值
  		() -> System.out.println("Hello Lambda!");

  语法格式二：有一个参数，并且无返回值
  		(x) -> System.out.println(x)

  语法格式三：若只有一个参数，小括号可以省略不写
  		x -> System.out.println(x)

  语法格式四：有两个以上的参数，有返回值，并且 Lambda 体中有多条语句
 		Comparator<Integer> com = (x, y) -> {
 			System.out.println("函数式接口");
 			return Integer.compare(x, y);
 		};

  语法格式五：若 Lambda 体中只有一条语句， return 和 大括号都可以省略不写
  		Comparator<Integer> com = (x, y) -> Integer.compare(x, y);

  语法格式六：Lambda 表达式的参数列表的数据类型可以省略不写，因为JVM编译器通过上下文推断出，数据类型，即“类型推断”
  		(Integer x, Integer y) -> Integer.compare(x, y);

  上联：左右遇一括号省
  下联：左侧推断类型省
  横批：能省则省

三、Lambda 表达式需要“函数式接口”的支持
  函数式接口：接口中只有一个抽象方法的接口，称为函数式接口。 可以使用注解 @FunctionalInterface 修饰
  			 可以检查是否是函数式接口

注意：作为参数传递 Lambda 表达式：为了将 Lambda 表达式作为参数传递，
接收Lambda 表达式的参数类型必须是与该 Lambda 表达式兼容的函数式接口的类型。

四、java8内置的四大核心函数式接口

  1. 消费类接口，有参数无返回值
  Consumer<T>
  void accept(T t);

  2. 供给型接口，无参有返回值
  Supplier<T>
  T get();

  3. 函数型接口
  Function<T, R>
  R apply(T t);

  4. 断言型接口
  Predicate<T>
  boolean test(T t);

五、方法引用：若 Lambda 体中的功能，已经有方法提供了实现，可以使用方法引用
  			  （可以将方法引用理解为 Lambda 表达式的另外一种表现形式）
  1. 对象的引用 :: 实例方法名
  2. 类名 :: 静态方法名
  3. 类名 :: 实例方法名

  注意：
  	 ①方法引用所引用的方法的参数列表与返回值类型，需要与函数式接口中抽象方法的参数列表和返回值类型保持一致！
  	 ②若Lambda 的参数列表的第一个参数，是实例方法的调用者，第二个参数(或无参)是实例方法的参数时，格式： ClassName::MethodName

六、构造器引用 :构造器的参数列表，需要与函数式接口中参数列表保持一致！
  1. 类名 :: new

七、数组引用
  	类型[] :: new;

八、Stream API 的操作步骤：

 “集合讲的是数据，流讲的是计算！”
 注意：
 ①Stream 自己不会存储元素。
 ②Stream 不会改变源对象。相反，他们会返回一个持有结果的新Stream。
 ③Stream 操作是延迟执行的。这意味着他们会等到需要结果的时候才执行。
 中间操作不会执行任何的处理！而在终止操作时一次性全部处理，称为“惰性求值”

 创建 Stream
    1. Collection系列集合中steam方法或parallelStream方法
    2. Arrays的静态方法stream()
    3. Stream中静态方法of
    4. 创建无限流
        iterate 迭代
        generate 生成
 中间操作
    1. 筛选与切片
        filter——接收 Lambda ， 从流中排除某些元素。
        limit——截断流，使其元素不超过给定数量。
        skip(n) —— 跳过元素，返回一个扔掉了前 n 个元素的流。若流中元素不足 n 个，则返回一个空流。与 limit(n) 互补
        distinct——筛选，通过流所生成元素的 hashCode() 和 equals() 去除重复元素
    2. 映射
        map——接收 Lambda ， 将元素转换成其他形式或提取信息。接收一个函数作为参数，该函数会被应用到每个元素上，并将其映射成一个新的元素。
        flatMap——接收一个函数作为参数，将流中的每个值都换成另一个流，然后把所有流连接成一个流
    3. 排序
        sorted()——自然排序 针对已经实现comparable接口的对象
        sorted(Comparator com)——定制排序
 终止操作(终端操作)
    1. 查找与匹配
 		allMatch——检查是否匹配所有元素
 		anyMatch——检查是否至少匹配一个元素
 		noneMatch——检查是否没有匹配的元素
 		findFirst——返回第一个元素
 		findAny——返回当前流中的任意元素
 		count——返回流中元素的总个数
 		max——返回流中最大值
 		min——返回流中最小值
 	归约与收集
 	    归约
         reduce(T identity, BinaryOperator) / reduce(BinaryOperator) ——可以将流中元素反复结合起来，得到一个值。
        收集
         collect——将流转换为其他形式。接收一个 Collector接口的实现，用于给Stream中元素做汇总的方法
         Collectors 实用类提供了很多静态方法，可以方便地创建常见收集器实例
         Collectors.joining(",","===","===");
    分组与分区
        groupingBy 根据某属性值对流分组，属性为K，结果为V
        partitioningBy 根据true或false进行分区



